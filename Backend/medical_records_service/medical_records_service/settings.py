"""
Django settings for medical_records_service project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv(os.path.join(BASE_DIR.parent, '.env')) # Load from root .env

SECRET_KEY = os.environ.get('SECRET_KEY', 'mrs-insecure-default-key')
DEBUG_STR = os.environ.get('DEBUG', 'True')
DEBUG = DEBUG_STR.lower() in ('true', '1')

ALLOWED_HOSTS_STR = os.environ.get('ALLOWED_HOSTS', '127.0.0.1,localhost')
ALLOWED_HOSTS = ALLOWED_HOSTS_STR.split(',') if ALLOWED_HOSTS_STR else []



# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'medical_records_app', # <-- Add your app here
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware', # Add this SECOND (after security, before common/csrf)
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'medical_records_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'medical_records_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DB_NAME = os.environ.get('DB_NAME', 'sand_fp_db_med_rec') # Default specific name
DB_USER = os.environ.get('DB_USER', 'root')
DB_PASSWORD = os.environ.get('DB_PASSWORD', 'tungcoi1234')
DB_HOST = os.environ.get('DB_HOST', 'localhost')
DB_PORT = os.environ.get('DB_PORT', '3306')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST, # In Docker Compose, this will be 'db'
        'PORT': DB_PORT,
    }
}

# # Add settings for other services this service needs to communicate with
# USER_SERVICE_BASE_URL = 'http://localhost:8000/api/user'
# PATIENT_SERVICE_BASE_URL = 'http://localhost:8001/api' # Assuming Patient on 8001, /api/
# NURSE_SERVICE_BASE_URL = 'http://localhost:8005/api' # Assuming Nurse on 8005, /api/
# LAB_SERVICE_BASE_URL = 'http://localhost:8006/api' # Assuming Lab on 8006, /api/
# # Add others as they are implemented/needed for aggregation
# # PRESCRIPTION_SERVICE_BASE_URL = 'http://localhost:80XX/api'

USER_SERVICE_BASE_URL = os.environ.get('USER_SERVICE_BASE_URL', 'http://localhost:8000/api/user') # <-- Read from env
PATIENT_SERVICE_BASE_URL = os.environ.get('PATIENT_SERVICE_BASE_URL', 'http://localhost:8001/api') # <-- Read from env
NURSE_SERVICE_BASE_URL = os.environ.get('NURSE_SERVICE_BASE_URL', 'http://localhost:8005/api') # <-- Read from env
LAB_SERVICE_BASE_URL = os.environ.get('LAB_SERVICE_BASE_URL', 'http://localhost:8006/api') # <-- Read from env
PRESCRIPTION_SERVICE_BASE_URL = os.environ.get('PRESCRIPTION_SERVICE_BASE_URL', 'http://localhost:8008/api') # <-- Read from env


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# CORS settings
CORS_ALLOW_ALL_ORIGINS = True
